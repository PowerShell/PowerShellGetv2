name: $(BuildDefinitionName)-$(date:yyMM).$(date:dd)$(rev:rrr)
trigger: none
pr: none

variables:
  - group: ESRP
  - name: ModuleName
    value: 'PowerShellGet'
  - name: BuildOutputPath
    value: '$(Build.SourcesDirectory)\dist\PowerShellGet'
  - name: SignedOutputPath
    value: '$(Build.SourcesDirectory)/signed'

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance

stages:
- stage: Build
  displayName: Build PowerShellGetV2 Module Package
  jobs:
  - job: BuildPkg
    displayName: Build Package
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals PSMMS2019-Secure


    steps:

    - pwsh: |
        Get-ChildItem -Path env:
        Get-ChildItem -Path env:
      displayName: Capture environment for build
      condition: succeededOrFailed()

    - pwsh: |
        Set-Location "$(Build.SourcesDirectory)"
        Import-Module ./tools/build.psm1 -Force
        Install-Dependencies
        Update-ModuleManifestFunctions
        Publish-ModuleArtifacts
      displayName: Build and publish artifact

    - pwsh: |
        $signSrcPath = "$(BuildOutputPath)"
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $outSignPath = "$(BuildOutputPath)"
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${outSignPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Create fake source and output variables for signing template and no signing
      condition: and(succeeded(), eq(variables['SkipSigning'], 'True'))

    - pwsh: |
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath

        # Created files signing directory
        $srcPath = "$(BuildOutputPath)"
        $createdSignSrcPath = "$(SignedOutputPath)\CreatedFiles"
        if (! (Test-Path -Path $createdSignSrcPath)) {
          $null = New-Item -Path $createdSignSrcPath -ItemType Directory -Verbose
        }
        Copy-Item -Path $srcPath -Dest $createdSignSrcPath -Recurse -Force -Verbose

        $signOutPath = "$(SignedOutputPath)\$(ModuleName)"
        if (! (Test-Path -Path $signOutPath)) {
          $null = New-Item -Path $signOutPath -ItemType Directory
        }

        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${createdSignSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $outSignPath = "$(SignedOutputPath)\$(ModuleName)"
        if (! (Test-Path -Path $outSignPath)) {
          $null = New-Item -Path $outSignPath -ItemType Directory -Verbose
        }

        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${outSignPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Set up for module created files code signing
      condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

    - pwsh: |
        Get-ChildItem -Path env:
        Get-ChildItem -Path . -Recurse -Directory
      displayName: Capture environment for code signing
      condition: succeededOrFailed()

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        buildOutputPath: $(signSrcPath)
        signOutputPath: $(signOutPath)
        certificateId: "CP-230012"
        pattern: |
          **\*.psd1
          **\*.psm1
          **\*.ps1xml
          **\*.mof
        useMinimatch: true

    - pwsh: |
        $srcPath = "$(BuildOutputPath)"
        $signOutPath = "$(SignedOutputPath)\$(ModuleName)"
        if (! (Test-Path -Path $signOutPath)) {
          $null = New-Item -Path $signOutPath -ItemType Directory
        }

        Get-ChildItem -Path $srcPath | Foreach-Object {
          if ($_.Attributes -ne "Directory")
          {
            $sig = Get-AuthenticodeSignature -FilePath $_.FullName
            if ($sig.Status -eq 'Valid' -and ($sig.SignerCertificate.Subject -like '*Microsoft*' -and $sig.SignerCertificate.Issuer -like '*Microsoft Code Signing PCA*')) {
              # Copy already signed files directly to output
              Copy-Item -Path $_.FullName -Dest $signOutPath -Force -Verbose
            }
          }
        }
      displayName: Copy already properly signed files (.psd1, .psm1, .ps1xml, .mof)
      condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

    - ${{ if ne(variables.SkipSigning, 'True') }}:
      - template: Sbom.yml@ComplianceRepo
        parameters:
          BuildDropPath: $(signOutPath)
          Build_Repository_Uri: 'https://github.com/powershell/powershellgetv2'
          PackageName: 'PowerShellGet'
          PackageVersion: '2.2.5.1'

    - pwsh: |
        $srcModulePath = Resolve-Path -Path "$(signOutPath)"   # build drop path -- '$(Build.SourcesDirectory)/signed/PowerShellGet'
        $nupkgPath = "$(SignedOutputPath)/nupkg"               # '$(Build.SourcesDirectory)/signed/nupkg'
        $tmpPkgMgmtDir = "$(SignedOutputPath)/tmpDir"          # '$(Build.SourcesDirectory)/signed/tmpDir'
        mkdir $nupkgPath
        mkdir $tmpPkgMgmtDir

        $srcLocation = [System.Uri] $nupkgPath.ToString()
        Register-PSRepository -Name "LocalNupkgRepo" -SourceLocation $srcLocation      #  '$(Build.SourcesDirectory)/signed/nupkg'
        $moduleToPublish = Join-Path -Path $srcModulePath -ChildPath "PowerShellGet"    #  '$(Build.SourcesDirectory)/signed/PowerShellGet/PowerShellGet'

        Save-Module -Name PackageManagement -Repository PSGallery -Path $tmpPkgMgmtDir  ## '$(Build.SourcesDirectory)/signed/tmpDir'
        Publish-Module -Path (Join-Path -Path $tmpPkgMgmtDir -ChildPath "PackageManagement") -Repository "LocalNupkgRepo"     #  '$(Build.SourcesDirectory)/signed/nupkg'

        Publish-Module -Path $moduleToPublish -Repository "LocalNupkgRepo"                                                    #  '$(Build.SourcesDirectory)/signed/nupkg'

        Remove-Item $nupkgPath/PackageManagement*.nupkg
        $artifactName = "$(ModuleName)"
        $nupkgName = "nupkg"
        Write-Host "##vso[artifact.upload containerfolder=$artifactName;artifactname=$nupkgName;]$nupkgPath"
        Write-Host "##vso[artifact.upload containerfolder=$artifactName;artifactname=$artifactName;]$srcModulePath"
      displayName: Create module artifacts (including .nupkg)

# Now on to the compliance stage
- stage: compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: ComplianceJob
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals PSMMS2019-Secure

    steps:
    - checkout: self
      clean: true
    - checkout: ComplianceRepo
      clean: true
    - download: current
      artifact: 'PowerShellGet'
    - template: script-module-compliance.yml@ComplianceRepo
      parameters:
        # component-governance - the path to sources
        sourceScanPath: '$(Build.SourcesDirectory)'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        # the compliance scanning must be uploaded, which you need to request
        codeBaseName: 'PowerShellGetv2_20200129'
        # selections
        APIScan: false # set to false when not using Windows APIs.

- stage: Release
  displayName: Publish Package to PSGallery
  condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), eq(variables['Publish'], 'True'))
  jobs:
  - template: release.yml
